using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Base64SourceGenerator;

public partial class Base64SourceGenerator
{
    private static IEnumerable<(string TypeName, string Source)> GenerateSource(
        ImmutableArray<(AdditionalText File, MethodInfo Method)> methodAndFile, CancellationToken token)
    {
        var stringBuilder = new StringBuilder();
        using var stringWriter = new StringWriter(stringBuilder);
        using var source = new IndentedTextWriter(stringWriter);


        var groups = methodAndFile.GroupBy(x => x.Method.Type);

        foreach (var group in groups)
        {
            token.ThrowIfCancellationRequested();
            
            var typeInfo = group.Key;
            
            source.WriteLine("// <auto-generated/>");
            source.WriteLine("#nullable enable");
            source.WriteLine($"// {DateTimeOffset.Now}");
            source.WriteLine();
            
            source.WriteLine($"namespace {typeInfo.Namespace}");
            source.WriteLine('{');
            source.Indent++;

            
            source.WriteLine($"partial {typeInfo.Keyword} {typeInfo.Name}");
            source.WriteLine("{");
            source.Indent++;
            
            foreach (var (file, methodInfo) in group)
            {
                var sourceText = file.GetText(token)!;
                var text = sourceText.ToString();
                var base64String = Convert.ToBase64String(sourceText.Encoding!.GetBytes(text));

                source.WriteLine($"{methodInfo.Modifiers} string {methodInfo.Name}() => \"{base64String}\";");
            }

            source.Indent--;
            source.WriteLine('}');

            source.Indent--;
            source.WriteLine('}');
            
            Debug.Assert(source.Indent == 0);

            yield return (TypeName: typeInfo.Name, Source: stringWriter.ToString());
            
            stringBuilder.Clear();
        }
    }
}